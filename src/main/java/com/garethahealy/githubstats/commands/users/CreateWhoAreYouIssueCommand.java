package com.garethahealy.githubstats.commands.users;

import com.garethahealy.githubstats.services.users.CreateWhoAreYouIssueService;
import freemarker.template.TemplateException;
import jakarta.enterprise.context.Dependent;
import jakarta.inject.Inject;
import org.apache.directory.api.ldap.model.exception.LdapException;
import org.kohsuke.github.GHPermissionType;
import picocli.CommandLine;

import java.io.IOException;
import java.util.concurrent.ExecutionException;

@Dependent
@CommandLine.Command(name = "create-who-are-you-issues", mixinStandardHelpOptions = true, description = "Creates an issue per user in the org config that isn't in a CVS")
public class CreateWhoAreYouIssueCommand implements Runnable {

    @CommandLine.Option(names = {"-org", "--organization"}, description = "GitHub organization", required = true)
    String organization;

    @CommandLine.Option(names = {"-repo", "--issue-repo"}, description = "Repo where the issues should be created, i.e.: 'org'", required = true)
    String orgRepo;

    @CommandLine.Option(names = {"-dry", "--dry-run"}, description = "Dry-run aka don't actually create the GitHub issues", required = true)
    boolean dryRun;

    @CommandLine.Option(names = {"-i", "--members-csv"}, description = "CSV of current known members", required = true)
    String membersCsv;

    @CommandLine.Option(names = {"-s", "--supplementary-csv"}, description = "CSV of current known members, generated by 'collect-members-from-ldap'", required = true)
    String supplementaryCsv;

    @CommandLine.Option(names = {"-p", "--permission"}, description = "Permission to search against; ADMIN, WRITE, READ", required = true)
    String permission;

    @CommandLine.Option(names = {"-vpn", "--fail-if-no-vpn"}, description = "Throw an exception if can't connect to LDAP")
    boolean failNoVpn;

    @Inject
    CreateWhoAreYouIssueService createWhoAreYouIssueService;

    @Override
    public void run() {
        try {
            createWhoAreYouIssueService.run(organization, orgRepo, dryRun, membersCsv, supplementaryCsv, convert(permission), failNoVpn);
        } catch (IOException | LdapException | TemplateException | ExecutionException | InterruptedException e) {
            throw new RuntimeException(e);
        }
    }

    private GHPermissionType convert(String permissions) {
        GHPermissionType answer;
        if (permissions.equalsIgnoreCase("ADMIN")) {
            answer = GHPermissionType.ADMIN;
        } else if (permissions.equalsIgnoreCase("WRITE")) {
            answer = GHPermissionType.WRITE;
        } else if (permissions.equalsIgnoreCase("READ")) {
            answer = GHPermissionType.READ;
        } else {
            throw new IllegalArgumentException("--permission=" + permissions + " is invalid.");
        }

        return answer;
    }
}
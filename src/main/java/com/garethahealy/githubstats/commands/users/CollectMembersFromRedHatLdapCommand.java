package com.garethahealy.githubstats.commands.users;

import com.garethahealy.githubstats.services.users.CollectMembersFromRedHatLdapService;
import freemarker.template.TemplateException;
import jakarta.enterprise.context.Dependent;
import jakarta.inject.Inject;
import org.apache.directory.api.ldap.model.exception.LdapException;
import picocli.CommandLine;

import java.io.IOException;
import java.util.concurrent.ExecutionException;

@Dependent
@CommandLine.Command(name = "collect-members-from-ldap", mixinStandardHelpOptions = true, description = "Creates a CSV containing members who have added their GitHub ID to LDAP so we can map who someone is from GitHub to Red Hat")
public class CollectMembersFromRedHatLdapCommand implements Runnable {

    @CommandLine.Option(names = {"-org", "--organization"}, description = "GitHub organization", required = true)
    String organization;

    @CommandLine.Option(names = {"-o", "--csv-output"}, description = "Output location for generated known members CSV", defaultValue = "ldap-members.csv")
    String output;

    @CommandLine.Option(names = {"-i", "--ldap-members-csv"}, description = "CSV of known members, generated by this command previously", required = true)
    String ldapMembersCsv;

    @CommandLine.Option(names = {"-g", "--guess"}, description = "Attempt to guess users we cant look up via InfoSec LDAP")
    boolean shouldGuess;

    @CommandLine.Option(names = {"-vpn", "--fail-if-no-vpn"}, description = "Throw an exception if can't connect to LDAP")
    boolean failNoVpn;

    @Inject
    CollectMembersFromRedHatLdapService collectMembersFromRedHatLdapService;

    @Override
    public void run() {
        try {
            collectMembersFromRedHatLdapService.run(organization, output, ldapMembersCsv, shouldGuess, failNoVpn);
        } catch (IOException | LdapException | TemplateException | ExecutionException | InterruptedException e) {
            throw new RuntimeException(e);
        }
    }
}
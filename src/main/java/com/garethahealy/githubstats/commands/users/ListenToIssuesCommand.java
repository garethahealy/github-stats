package com.garethahealy.githubstats.commands.users;

import com.garethahealy.githubstats.services.users.ListenToIssuesService;
import freemarker.template.TemplateException;
import jakarta.enterprise.context.Dependent;
import jakarta.inject.Inject;
import org.apache.directory.api.ldap.model.exception.LdapException;
import picocli.CommandLine;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Set;

@Dependent
@CommandLine.Command(name = "listen-to-issues", mixinStandardHelpOptions = true, description = "Searches for issues and runs the specified processors")
public class ListenToIssuesCommand implements Runnable {

    @CommandLine.Option(names = {"-org", "--organization"}, description = "GitHub organization", required = true)
    String organization;

    @CommandLine.Option(names = {"-repo", "--issue-repo"}, description = "Repo where the issues should be created, i.e.: 'org'")
    String orgRepo;

    @CommandLine.Option(names = {"-p", "--processors"}, description = "Comma-separated list of processors to run against pull requests", required = true)
    String processors;

    @CommandLine.Option(names = {"-i", "--ldap-members-csv"}, description = "CSV of known members, generated by this command previously", defaultValue = "ldap-members.csv")
    String ldapMembersCsv;

    @CommandLine.Option(names = {"-s", "--supplementary-csv"}, description = "CSV of known members collected manually or via the google form", defaultValue = "supplementary.csv")
    String supplementaryCsv;

    @CommandLine.Option(names = {"-dry", "--dry-run"}, description = "Dry-run aka don't actually create the GitHub issue", required = true)
    boolean dryRun;

    @CommandLine.Option(names = {"-vpn", "--fail-if-no-vpn"}, description = "Throw an exception if can't connect to LDAP", defaultValue = "true")
    boolean failNoVpn;

    @Inject
    ListenToIssuesService listenToIssuesService;

    @Override
    public void run() {
        try {
            if (!Files.exists(Path.of(ldapMembersCsv))) {
                throw new FileNotFoundException("--ldap-members-csv=" + ldapMembersCsv + " not found.");
            }

            if (!Files.exists(Path.of(supplementaryCsv))) {
                throw new FileNotFoundException("--supplementary-csv=" + supplementaryCsv + " not found.");
            }

            Set<String> activeProcessors = Set.of(processors.split(","));
            if (activeProcessors.isEmpty()) {
                throw new IllegalArgumentException("--processors is empty");
            }

            listenToIssuesService.run(organization, orgRepo, activeProcessors, new File(ldapMembersCsv), new File(supplementaryCsv), dryRun, failNoVpn);
        } catch (IOException | LdapException | TemplateException e) {
            throw new RuntimeException(e);
        }
    }
}
